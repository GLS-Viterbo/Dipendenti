package it.gls.dipendenti.shift.repository;

import it.gls.dipendenti.shift.model.ShiftAssignment;
import it.gls.dipendenti.util.TimeZoneUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.*;
import java.util.List;
import java.util.Optional;

@Repository
public class ShiftAssignmentRepository {

    private final JdbcTemplate jdbcTemplate;
    private final RowMapper<ShiftAssignment> rowMapper = new ShiftAssignmentRowMapper();

    public ShiftAssignmentRepository(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /**
     * Add a new shift assignment to the database
     *
     * @param assignment shift assignment to add
     * @return new shift assignment with id
     */
    public ShiftAssignment save(ShiftAssignment assignment) {
        String sql = """
            INSERT INTO shift_assignments 
            (employee_id, date, start_time, end_time, auto_generated, modified_at, note)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            RETURNING id
            """;

        Long id = jdbcTemplate.queryForObject(sql, Long.class,
                assignment.employeeId(),
                assignment.date(),
                assignment.startTime(),
                assignment.endTime(),
                assignment.autoGenerated(),
                TimeZoneUtils.toTimestamp(assignment.modifiedAt()),
                assignment.note()
        );

        return new ShiftAssignment(id, assignment.employeeId(), assignment.date(),
                assignment.startTime(), assignment.endTime(), assignment.autoGenerated(),
                assignment.modifiedAt(), assignment.note());
    }

    /**
     * Returns the shift assignment with the given id
     *
     * @param id the id of the searched shift assignment
     * @return optional of shift assignment
     */
    public Optional<ShiftAssignment> findById(Long id) {
        String sql = "SELECT * FROM shift_assignments WHERE id = ?";
        return jdbcTemplate.query(sql, rowMapper, id).stream().findFirst();
    }

    /**
     * Getting all shift assignments for a specific employee
     *
     * @param employeeId the employee id
     * @return list of shift assignments
     */
    public List<ShiftAssignment> findByEmployeeId(Long employeeId) {
        String sql = "SELECT * FROM shift_assignments WHERE employee_id = ? ORDER BY date DESC";
        return jdbcTemplate.query(sql, rowMapper, employeeId);
    }

    /**
     * Getting all shift assignments for a specific date
     *
     * @param date the date
     * @return list of shift assignments
     */
    public List<ShiftAssignment> findByDate(LocalDate date, Long companyId) {
        String sql = """
        SELECT sa.* FROM shift_assignments sa
        JOIN employees e ON sa.employee_id = e.id
        WHERE sa.date = ? AND e.company_id = ?
        ORDER BY sa.start_time
        """;
        return jdbcTemplate.query(sql, rowMapper, date, companyId);
    }

    /**
     * Getting shift assignment for a specific employee on a specific date
     *
     * @param employeeId the employee id
     * @param date       the date
     * @return optional of shift assignment
     */
    public List<ShiftAssignment> findByEmployeeIdAndDate(Long employeeId, LocalDate date) {
        String sql = "SELECT * FROM shift_assignments WHERE employee_id = ? AND date = ?";
        return jdbcTemplate.query(sql, rowMapper, employeeId, date).stream().toList();
    }

    /**
     * Getting all shift assignments for a specific employee in a date range
     *
     * @param employeeId the employee id
     * @param startDate  start date of the range
     * @param endDate    end date of the range
     * @return list of shift assignments
     */
    public List<ShiftAssignment> findByEmployeeIdAndDateRange(Long employeeId, LocalDate startDate, LocalDate endDate) {
        String sql = """
                SELECT * FROM shift_assignments
                WHERE employee_id = ?
                AND date >= ?
                AND date <= ?
                ORDER BY date
                """;
        return jdbcTemplate.query(sql, rowMapper, employeeId, startDate, endDate);
    }

    /**
     * Getting all shift assignments in a date range
     *
     * @param startDate start date of the range
     * @param endDate   end date of the range
     * @return list of shift assignments
     */
    public List<ShiftAssignment> findByDateRange(LocalDate startDate, LocalDate endDate, Long companyId) {
        String sql = """
        SELECT sa.* FROM shift_assignments sa
        JOIN employees e ON sa.employee_id = e.id
        WHERE sa.date >= ?
        AND sa.date <= ?
        AND e.company_id = ?
        ORDER BY sa.date, sa.employee_id
        """;
        return jdbcTemplate.query(sql, rowMapper, startDate, endDate, companyId);
    }

    /**
     * Getting all auto-generated shift assignments
     *
     * @return list of shift assignments
     */
    public List<ShiftAssignment> findAllAutoGenerated() {
        String sql = "SELECT * FROM shift_assignments WHERE auto_generated = true ORDER BY date DESC";
        return jdbcTemplate.query(sql, rowMapper);
    }

    /**
     * Count shift assignments for an employee in a date range
     *
     * @param employeeId the employee id
     * @param startDate  start date
     * @param endDate    end date
     * @return count of assignments
     */
    public int countByEmployeeIdAndDateRange(Long employeeId, LocalDate startDate, LocalDate endDate) {
        String sql = """
                SELECT COUNT(*) FROM shift_assignments
                WHERE employee_id = ?
                AND date >= ?
                AND date <= ?
                """;
        Integer count = jdbcTemplate.queryForObject(sql, Integer.class, employeeId, startDate, endDate);
        return count != null ? count : 0;
    }

    /**
     * Getting all shift assignments
     *
     * @return list of all shift assignments
     */
    public List<ShiftAssignment> findAll(Long companyId) {
        String sql = """
        SELECT sa.* FROM shift_assignments sa
        JOIN employees e ON sa.employee_id = e.id
        WHERE e.company_id = ?
        ORDER BY sa.date DESC, sa.employee_id
        """;
        return jdbcTemplate.query(sql, rowMapper, companyId);
    }

    /**
     * Updates given shift assignment attributes
     *
     * @param assignment shift assignment with changed attributes
     * @return true if changes have been made
     */
    public boolean update(ShiftAssignment assignment) {
        String sql = """
                UPDATE shift_assignments
                SET employee_id = ?, date = ?, start_time = ?, end_time = ?, 
                    auto_generated = ?, modified_at = ?, note = ?
                WHERE id = ?
                """;

        int rows = jdbcTemplate.update(
                sql,
                assignment.employeeId(),
                assignment.date(),
                assignment.startTime(),
                assignment.endTime(),
                assignment.autoGenerated(),
                assignment.modifiedAt() != null ? assignment.modifiedAt().toOffsetDateTime() : null,
                assignment.note(),
                assignment.id()
        );

        return rows > 0;
    }

    /**
     * Deletes a shift assignment
     *
     * @param id shift assignment id
     * @return true if assignment is deleted
     */
    public boolean delete(Long id) {
        String sql = "DELETE FROM shift_assignments WHERE id = ?";
        int rows = jdbcTemplate.update(sql, id);
        return rows > 0;
    }

    /**
     * Deletes all shift assignments for an employee
     *
     * @param employeeId the employee id
     * @return number of deleted assignments
     */
    public int deleteByEmployeeId(Long employeeId) {
        String sql = "DELETE FROM shift_assignments WHERE employee_id = ?";
        return jdbcTemplate.update(sql, employeeId);
    }

    public int deleteFutureByEmployeeId(Long employeeId) {
        String sql = "DELETE FROM shift_assignments WHERE employee_id = ? AND date > ?";
        return jdbcTemplate.update(sql, employeeId, LocalDate.now());
    }

    /**
     * Deletes all shift assignments in a date range
     *
     * @param startDate start date
     * @param endDate   end date
     * @return number of deleted assignments
     */
    public int deleteByDateRange(LocalDate startDate, LocalDate endDate) {
        String sql = "DELETE FROM shift_assignments WHERE date >= ? AND date <= ?";
        return jdbcTemplate.update(sql, startDate, endDate);
    }

    /**
     * Deletes all shift assignments after a date
     *
     * @param date date
     * @return number of deleted assignments
     */
    public int deleteAfterDate(LocalDate date) {
        String sql = "DELETE FROM shift_assignments WHERE date > ?";
        return jdbcTemplate.update(sql, date);
    }
    /**
     * Deletes all auto-generated shift assignments in a date range
     *
     * @param startDate start date
     * @param endDate   end date
     * @return number of deleted assignments
     */
    public int deleteAutoGeneratedByDateRange(LocalDate startDate, LocalDate endDate) {
        String sql = "DELETE FROM shift_assignments WHERE date >= ? AND date <= ? AND auto_generated = true";
        return jdbcTemplate.update(sql, startDate, endDate);
    }

    /**
     * Deletes shift assignment for an employee on a specific date
     *
     * @param employeeId the employee id
     * @param date       the date
     * @return true if assignment is deleted
     */
    public boolean deleteByEmployeeIdAndDate(Long employeeId, LocalDate date) {
        String sql = "DELETE FROM shift_assignments WHERE employee_id = ? AND date = ?";
        int rows = jdbcTemplate.update(sql, employeeId, date);
        return rows > 0;
    }

    /**
     * Mapping database attributes to shift assignment
     */
    private static class ShiftAssignmentRowMapper implements RowMapper<ShiftAssignment> {
        @Override
        public ShiftAssignment mapRow(ResultSet rs, int rowNum) throws SQLException {
            Timestamp modifiedAtTs = rs.getTimestamp("modified_at");
            ZonedDateTime modifiedAt = null;

            if (modifiedAtTs != null) {
                // Converti Timestamp → Instant → ZonedDateTime (company zone)
                modifiedAt = TimeZoneUtils.toCompanyTime(modifiedAtTs.toInstant());
            }

            return new ShiftAssignment(
                    rs.getLong("id"),
                    rs.getLong("employee_id"),
                    rs.getDate("date").toLocalDate(),
                    rs.getTime("start_time").toLocalTime(),
                    rs.getTime("end_time").toLocalTime(),
                    rs.getBoolean("auto_generated"),
                    modifiedAt,
                    rs.getString("note")
            );
        }
    }
}