import React, { useState, useEffect } from 'react';
import moment from 'moment';
import 'moment/locale/it';
import { toast } from "react-toastify";
import {
  Edit,
  Trash2,
  Calendar as CalendarIcon,
} from 'lucide-react';
import { deleteShiftAssignment, deleteShiftAssociation, modifyAssignment } from '../api/shifts';
const EditEventModal = ({ show, onClose, event, assignments, setAssignments }) => {
  const [formData, setFormData] = useState({
    startTime: '',
    endTime: '',
    note: ''
  });

  useEffect(() => {
    if (event && event.resource.type === 'assignment') {
      const assignment = event.resource.data;
      setFormData({
        startTime: assignment.startTime,
        endTime: assignment.endTime,
        note: assignment.note || ''
      });
    }
  }, [event]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (event.resource.type !== 'assignment') return;

    const updatedAssignments = assignments.map(a =>
      a.id === event.resource.data.id
        ? {
            ...a,
            startTime: formData.startTime,
            endTime: formData.endTime,
            note: formData.note || null,
            autoGenerated: false
          }
        : a
    );

    try {
      await modifyAssignment(updatedAssignments.find(a => a.id == event.resource.data.id))
      toast.success("Turno aggiornato con successo!");
    } catch (err) {
      toast.error(err.message || "Errore durante l'aggiornamento del turno");
      console.error(err)
    }
    setAssignments(updatedAssignments);
    onClose();
  };

  const handleDelete = async () => {
    if (!confirm('Sei sicuro di voler eliminare questo turno?')) return;
    try {
      await deleteShiftAssignment(event.resource.data.id)
      toast.success("Turno eliminato con successo!")
    } catch (err) {
      toast.error("Errore nell'eliminazione del turno")
      console.error()
    }

    const updatedAssignments = assignments.filter(
      a => a.id !== event.resource.data.id
    );
    setAssignments(updatedAssignments);
    onClose();
  };

  if (!show || !event) return null;

  // Se è un'assenza, mostra solo dettagli
  if (event.resource.type === 'absence') {
    const absence = event.resource.data;
    const typeLabels = {
      'VACATION': 'Ferie',
      'ROL': 'ROL',
      'SICK_LEAVE': 'Malattia',
      'PERMIT': 'Permesso'
    };

    return (
      <div className="modal show d-block" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h5 className="modal-title">
                <CalendarIcon size={20} className="me-2" />
                Dettaglio Assenza
              </h5>
              <button type="button" className="btn-close" onClick={onClose} />
            </div>
            <div className="modal-body">
              <div className="mb-3">
                <label className="text-muted small mb-1">Tipo</label>
                <div className="fw-semibold">{typeLabels[absence.type]}</div>
              </div>
              <div className="mb-3">
                <label className="text-muted small mb-1">Periodo</label>
                <div className="fw-semibold">
                  {moment(absence.startDate).format('DD/MM/YYYY')} - {moment(absence.endDate).format('DD/MM/YYYY')}
                </div>
              </div>
              <div className="mb-3">
                <label className="text-muted small mb-1">Ore</label>
                <div className="fw-semibold">{absence.hoursCount} ore</div>
              </div>
              <div className="alert alert-info mb-0">
                <small>Questa è un'assenza. Per modificarla vai alla sezione "Gestione Assenze".</small>
              </div>
            </div>
            <div className="modal-footer">
              <button type="button" className="btn btn-secondary" onClick={onClose}>
                Chiudi
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Modal per modifica turno
  const assignment = event.resource.data;

  return (
    <div className="modal show d-block" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
      <div className="modal-dialog modal-dialog-centered">
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">
              <Edit size={20} className="me-2" />
              Modifica Turno
            </h5>
            <button type="button" className="btn-close" onClick={onClose} />
          </div>
          <form onSubmit={handleSubmit}>
            <div className="modal-body">
              <div className="alert alert-info d-flex align-items-center gap-2 mb-4">
                <CalendarIcon size={18} />
                <small>
                  Turno del <strong>{moment(assignment.date).format('DD/MM/YYYY')}</strong>
                  {assignment.autoGenerated && (
                    <span className="badge bg-success ms-2">Auto-generato</span>
                  )}
                </small>
              </div>

              <div className="row">
                <div className="col-md-6 mb-3">
                  <label className="form-label fw-semibold">
                    Ora Inizio <span className="text-danger">*</span>
                  </label>
                  <input
                    type="time"
                    className="form-control"
                    value={formData.startTime}
                    onChange={(e) => setFormData({ ...formData, startTime: e.target.value })}
                    required
                  />
                </div>
                <div className="col-md-6 mb-3">
                  <label className="form-label fw-semibold">
                    Ora Fine <span className="text-danger">*</span>
                  </label>
                  <input
                    type="time"
                    className="form-control"
                    value={formData.endTime}
                    onChange={(e) => setFormData({ ...formData, endTime: e.target.value })}
                    required
                  />
                </div>
              </div>

              <div className="mb-3">
                <label className="form-label fw-semibold">Note</label>
                <textarea
                  className="form-control"
                  rows="3"
                  value={formData.note}
                  onChange={(e) => setFormData({ ...formData, note: e.target.value })}
                  placeholder="Note aggiuntive..."
                />
              </div>
            </div>
            <div className="modal-footer">
              <button
                type="button"
                className="btn btn-danger me-auto"
                onClick={handleDelete}
              >
                <Trash2 size={16} className="me-1" />
                Elimina
              </button>
              <button type="button" className="btn btn-secondary" onClick={onClose}>
                Annulla
              </button>
              <button type="submit" className="btn btn-primary">
                Salva Modifiche
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};
export default EditEventModal;