import React, { useState, useEffect } from 'react';
import moment from 'moment';
import 'moment/locale/it';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import { toast } from "react-toastify";
import {
    Plus,
    Calendar as CalendarIcon,
    AlertTriangle
} from 'lucide-react';
import { assignShiftManually } from '../api/shifts';
const AssignmentModal = ({ show, onClose, employee, slotInfo, shifts, assignments, setAssignments }) => {
    const [formData, setFormData] = useState({
        shiftId: '',
        customStart: '',
        customEnd: '',
        note: '',
        useCustomTime: false
    });

    useEffect(() => {
        if (slotInfo) {
            const startTime = moment(slotInfo.start).format('HH:mm');
            const endTime = moment(slotInfo.end).format('HH:mm');
            setFormData(prev => ({
                ...prev,
                customStart: startTime,
                customEnd: endTime
            }));
        }
    }, [slotInfo]);

    const handleSubmit = async (e) => {
        e.preventDefault();

        try {
            let startTime, endTime;
            if (formData.useCustomTime) {
                startTime = formData.customStart;
                endTime = formData.customEnd;
            } else {
                const shift = shifts.find(s => s.id === parseInt(formData.shiftId));
                startTime = shift.startTime;
                endTime = shift.endTime;
            }

            const newAssignment = {
                employeeId: employee.id,
                date: moment(slotInfo.start).format('YYYY-MM-DD'),
                startTime,
                endTime,
                autoGenerated: false,
                note: formData.note || null
            };

            console.log(newAssignment)
            await assignShiftManually(newAssignment)
            setFormData({
                shiftId: '',
                customStart: '',
                customEnd: '',
                note: '',
                useCustomTime: false
            });
            onClose();
        } catch (err) {
            console.error('Errore durante l\'assegnazione:', err);
            if (err.status === 409) {
                toast.error('Impossibile associare il turno: non ci possono essere sovrapposizioni');
                console.error(err)
            } else {
                toast.error('Si Ã¨ verificato un errore durante l\'associazione del turno.');
                console.error(err)
            }
        }
    };

    if (!show || !employee || !slotInfo) return null;

    return (
        <div className="modal show d-block" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
            <div className="modal-dialog modal-dialog-centered">
                <div className="modal-content">
                    <div className="modal-header">
                        <h5 className="modal-title">
                            <Plus size={20} className="me-2" />
                            Aggiungi Turno
                        </h5>
                        <button type="button" className="btn-close" onClick={onClose} />
                    </div>
                    <form onSubmit={handleSubmit}>
                        <div className="modal-body">
                            <div className="alert alert-info d-flex align-items-center gap-2 mb-4">
                                <CalendarIcon size={18} />
                                <small>
                                    Turno per <strong>{employee.name} {employee.surname}</strong> il{' '}
                                    <strong>{moment(slotInfo.start).format('DD/MM/YYYY')}</strong>
                                </small>
                            </div>

                            <div className="form-check mb-3">
                                <input
                                    className="form-check-input"
                                    type="checkbox"
                                    id="useCustomTime"
                                    checked={formData.useCustomTime}
                                    onChange={(e) => setFormData({ ...formData, useCustomTime: e.target.checked })}
                                />
                                <label className="form-check-label" htmlFor="useCustomTime">
                                    Usa orario personalizzato
                                </label>
                            </div>

                            {!formData.useCustomTime ? (
                                <div className="mb-3">
                                    <label className="form-label fw-semibold">
                                        Seleziona Turno <span className="text-danger">*</span>
                                    </label>
                                    <select
                                        className="form-select"
                                        value={formData.shiftId}
                                        onChange={(e) => setFormData({ ...formData, shiftId: e.target.value })}
                                        required
                                    >
                                        <option value="">Seleziona turno...</option>
                                        {shifts.filter(s => s.active).map(shift => (
                                            <option key={shift.id} value={shift.id}>
                                                {shift.name} ({shift.startTime.replace(/:\d{2}$/, '')} - {shift.endTime.replace(/:\d{2}$/, '')})
                                            </option>
                                        ))}
                                    </select>
                                </div>
                            ) : (
                                <div className="row">
                                    <div className="col-md-6 mb-3">
                                        <label className="form-label fw-semibold">
                                            Ora Inizio <span className="text-danger">*</span>
                                        </label>
                                        <input
                                            type="time"
                                            className="form-control"
                                            value={formData.customStart}
                                            onChange={(e) => setFormData({ ...formData, customStart: e.target.value })}
                                            required
                                        />
                                    </div>
                                    <div className="col-md-6 mb-3">
                                        <label className="form-label fw-semibold">
                                            Ora Fine <span className="text-danger">*</span>
                                        </label>
                                        <input
                                            type="time"
                                            className="form-control"
                                            value={formData.customEnd}
                                            onChange={(e) => setFormData({ ...formData, customEnd: e.target.value })}
                                            required
                                        />
                                    </div>
                                </div>
                            )}

                            <div className="mb-3">
                                <label className="form-label fw-semibold">Note</label>
                                <textarea
                                    className="form-control"
                                    rows="3"
                                    value={formData.note}
                                    onChange={(e) => setFormData({ ...formData, note: e.target.value })}
                                    placeholder="Note aggiuntive..."
                                />
                            </div>
                        </div>
                        <div className="modal-footer">
                            <button type="button" className="btn btn-secondary" onClick={onClose}>
                                Annulla
                            </button>
                            <button type="submit" className="btn btn-primary">
                                Aggiungi Turno
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
};
export default AssignmentModal;